-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package agora-drep
@version 1.0.0.0


-- | Plutarch utilities
module Agora.Utils

-- | Get the sum of all values belonging to a particular CurrencySymbol.
psymbolValueOf :: forall (keys :: KeyGuarantees) (amounts :: AmountGuarantees) (s :: S). Term s (PCurrencySymbol :--> (PValue keys amounts :--> PInteger))

-- | Fused filter and length function for Plutarch lists
pcountIf :: forall (list :: (S -> Type) -> S -> Type) (a :: S -> Type) (s :: S). PIsListLike list a => Term s ((a :--> PBool) :--> (list a :--> PInteger))

-- | Extract PScriptHash of PCurrencySymbol
pcurrencySymbolToScriptHash :: forall (s :: S). Term s (PAsData PCurrencySymbol) -> Term s (PAsData PScriptHash)

-- | Convert a PScriptHash to PCurrencySymbol
pscriptHashToCurrencySymbol :: forall (s :: S). Term s (PAsData PScriptHash) -> Term s (PAsData PCurrencySymbol)


-- | Agora DRep Proxy script
module Agora.Proxy

-- | Proxy script
--   
--   This script serves both validator script and minting script purposes.
--   - Mint a Proxied Governance Authority Token - Verify spending from the
--   proxy effect script address
--   
--   See details in the <a>specification</a>.
proxyScript :: forall (s :: S). Term s (PAsData PCurrencySymbol :--> (PAsData PScriptContext :--> PUnit))

-- | Datum stored at the proxy validator script
data PProxyDatum s
PProxyDatum :: Term s (PAsData PScriptHash) -> Term s (PAsData PDatumHash) -> PProxyDatum s

-- | Script hash of the Plutus V3 effect
[$sel:receiverScript:PProxyDatum] :: PProxyDatum s -> Term s (PAsData PScriptHash)

-- | Hash of the datum that must be created at the receiver script
[$sel:datumHash:PProxyDatum] :: PProxyDatum s -> Term s (PAsData PDatumHash)

-- | Haskell-level datum for the Proxy Validator script.
data ProxyDatum
ProxyDatum :: ScriptHash -> DatumHash -> ProxyDatum
[$sel:pdReceiverScript:ProxyDatum] :: ProxyDatum -> ScriptHash
[$sel:pdDatumHash:ProxyDatum] :: ProxyDatum -> DatumHash
instance Generics.SOP.Universe.Generic Agora.Proxy.ProxyDatum
instance GHC.Generics.Generic Agora.Proxy.ProxyDatum
instance GHC.Show.Show Agora.Proxy.ProxyDatum
instance Plutarch.Internal.PlutusType.PlutusType Agora.Proxy.PProxyDatum
instance Plutarch.Internal.IsData.PIsData Agora.Proxy.PProxyDatum
instance Plutarch.Internal.Eq.PEq Agora.Proxy.PProxyDatum
instance forall (s :: Plutarch.Internal.Term.S). Generics.SOP.Universe.Generic (Agora.Proxy.PProxyDatum s)
instance forall (s :: Plutarch.Internal.Term.S). GHC.Generics.Generic (Agora.Proxy.PProxyDatum s)
instance Plutarch.Internal.TryFrom.PTryFrom Plutarch.Builtin.Data.PData (Plutarch.Builtin.Data.PAsData Agora.Proxy.PProxyDatum)
instance PlutusTx.IsData.Class.FromData Agora.Proxy.ProxyDatum
instance PlutusTx.IsData.Class.ToData Agora.Proxy.ProxyDatum


-- | This module was copied from the Liqwid-Labs/agora repo, and updated to
--   work with Plutus V3 and Plutarch 1.10.1
module Agora.AuthorityToken

-- | Assert that a single authority token has been burned.
singleAuthorityTokenBurned :: forall (keys :: KeyGuarantees) (amounts :: AmountGuarantees) (s :: S). Term s PCurrencySymbol -> Term s (PBuiltinList (PAsData PTxInInfo)) -> Term s (PValue keys amounts) -> Term s PBool

-- | Check that all GATs are valid in a particular TxOut.
--   
--   WARNING: As of version 1.0.0, this has been weakened in order to be
--   compatible with RATs. The token name is no longer checked, meaning
--   that a GAT can escape from its effect script, if the effect script is
--   vulnerable. In order to prevent this, all effect scripts should be
--   implemented carefully, and ideally use the trusted effect base. See
--   also <a>Effect</a>.
--   
--   (before 1.0.0) How this is checked: an AuthorityToken should never
--   leave the Effect it was initially sent to, so we simply check that the
--   script address the token resides in matches the TokenName. Since the
--   TokenName was tagged upon mint with the Effect script it was sent to,
--   this is enough to prove validity. In other words, check that all
--   assets of a particular currency symbol are tagged with a TokenName
--   that matches where they live.
authorityTokensValidIn :: forall (s :: S). Term s (PCurrencySymbol :--> (PTxOut :--> PBool))


-- | Agora DRep Voting Effect script
module Agora.Effect.Voting

-- | Voting Effect Plutarch script - This script is used to: - certify new
--   DRep registration - verify the DRep vote on behalf of the DRep based
--   on the Agora voting result
--   
--   See details in the <a>specification</a>.
votingEffectScript :: ClosedTerm (PAsData PCurrencySymbol :--> (PAsData PScriptContext :--> PUnit))

-- | Haskell-level datum for the Voting Effect Validator script.
data VotingDatum
VotingDatum :: GovernanceActionId -> Vote -> VotingDatum
[$sel:vdGovernanceActionId:VotingDatum] :: VotingDatum -> GovernanceActionId
[$sel:vdVote:VotingDatum] :: VotingDatum -> Vote
instance Plutarch.Internal.PlutusType.PlutusType Agora.Effect.Voting.PVotingDatum
instance Plutarch.Internal.IsData.PIsData Agora.Effect.Voting.PVotingDatum
instance Plutarch.Internal.Eq.PEq Agora.Effect.Voting.PVotingDatum
instance forall (s :: Plutarch.Internal.Term.S). Generics.SOP.Universe.Generic (Agora.Effect.Voting.PVotingDatum s)
instance forall (s :: Plutarch.Internal.Term.S). GHC.Generics.Generic (Agora.Effect.Voting.PVotingDatum s)
instance Plutarch.Internal.TryFrom.PTryFrom Plutarch.Builtin.Data.PData (Plutarch.Builtin.Data.PAsData Agora.Effect.Voting.PVotingDatum)
instance PlutusTx.IsData.Class.FromData Agora.Effect.Voting.VotingDatum
instance PlutusTx.IsData.Class.ToData Agora.Effect.Voting.VotingDatum
